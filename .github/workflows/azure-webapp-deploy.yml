name: Deploy to Azure Web Apps

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  WORKING_DIRECTORY: ./backend

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python version
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          ${{ env.WORKING_DIRECTORY }}/requirements.txt

    # Cache the virtual environment
    - name: Cache virtual environment
      uses: actions/cache@v3
      with:
        path: ${{ env.WORKING_DIRECTORY }}/.venv
        key: venv-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          venv-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-

    - name: Create and start virtual environment
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip

    # Cache pip packages
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          pip-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-

    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        source .venv/bin/activate
        pip install -r requirements.txt

    # Add startup script for system dependencies
    - name: Create startup script
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        echo "#!/bin/bash" > startup.sh
        # Update package list and install dependencies with error checking
        echo "set -e && \\" >> startup.sh
        echo "apt-get update && \\" >> startup.sh
        echo "DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\" >> startup.sh
        echo "  libmagic1 \\" >> startup.sh
        echo "  libgl1-mesa-glx \\" >> startup.sh
        echo "  libglib2.0-0 \\" >> startup.sh
        echo "  libsm6 \\" >> startup.sh
        echo "  libxext6 \\" >> startup.sh
        echo "  libxrender1 \\" >> startup.sh
        echo "  libgomp1 \\" >> startup.sh
        echo "  libglu1-mesa \\" >> startup.sh
        echo "  libxi6 \\" >> startup.sh
        echo "  libxmu6 \\" >> startup.sh
        echo "  x11-common \\" >> startup.sh
        echo "  poppler-utils \\" >> startup.sh
        echo "  tesseract-ocr && \\" >> startup.sh
        # Update pip and install headless opencv
        echo "python -m pip install --upgrade pip && \\" >> startup.sh
        echo "pip uninstall -y opencv-python opencv-python-headless && \\" >> startup.sh
        echo "pip install opencv-python-headless==4.5.1.48 && \\" >> startup.sh
        # Create symbolic links and set permissions
        echo "mkdir -p /usr/lib/x86_64-linux-gnu/mesa && \\" >> startup.sh
        echo "ln -sf /usr/lib/x86_64-linux-gnu/libGL.so.1 /usr/lib/libGL.so.1 && \\" >> startup.sh
        echo "ln -sf /usr/lib/x86_64-linux-gnu/libGL.so.1 /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 && \\" >> startup.sh
        echo "chmod 755 /usr/lib/x86_64-linux-gnu/libGL.so.1 && \\" >> startup.sh
        # Update library cache
        echo "ldconfig && \\" >> startup.sh
        # Set environment variables
        echo "export PYTHONUNBUFFERED=1 && \\" >> startup.sh
        echo "export PYTHONDONTWRITEBYTECODE=1 && \\" >> startup.sh
        echo "export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/lib:/usr/local/lib:/usr/lib/x86_64-linux-gnu/mesa:\$LD_LIBRARY_PATH && \\" >> startup.sh
        echo "export PYTHONPATH=/home/site/wwwroot/antenv/lib/python3.11/site-packages:/home/site/wwwroot:\$PYTHONPATH && \\" >> startup.sh
        # Debug information
        echo "echo 'OpenGL packages installed:' && \\" >> startup.sh
        echo "dpkg -l | grep -i gl && \\" >> startup.sh
        echo "echo 'Checking OpenGL installation:' && \\" >> startup.sh
        echo "ls -l /usr/lib/x86_64-linux-gnu/libGL* && \\" >> startup.sh
        echo "ls -l /usr/lib/libGL* && \\" >> startup.sh
        echo "echo 'Library dependencies:' && \\" >> startup.sh
        echo "ldd /usr/lib/x86_64-linux-gnu/libGL.so.1 && \\" >> startup.sh
        # Start the application
        echo "cd /home/site/wwwroot && \\" >> startup.sh
        echo "gunicorn --bind=0.0.0.0 --timeout 600 --chdir /home/site/wwwroot app:app" >> startup.sh
        chmod +x startup.sh

    - name: List backend directory contents
      run: |
        echo "Backend directory contents:"
        ls -R ${{ env.WORKING_DIRECTORY }}/

    # Cache the zip artifact
    - name: Cache deployment artifact
      uses: actions/cache@v3
      id: artifact-cache
      with:
        path: ${{ env.WORKING_DIRECTORY }}/release.zip
        key: deploy-${{ github.sha }}
        restore-keys: |
          deploy-

    - name: Zip artifact for deployment
      if: steps.artifact-cache.outputs.cache-hit != 'true'
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        # Create a minimal deployment package
        zip release.zip ./* -r \
          -x "*.pyc" \
          -x "__pycache__/*" \
          -x "*.git*" \
          -x ".venv/*" \
          -x "tests/*" \
          -x "*.log" \
          -x "*.tmp" \
          -x "*.bak"

    - name: Upload artifact for deployment jobs
      uses: actions/upload-artifact@v4
      with:
        name: python-app
        path: ${{ env.WORKING_DIRECTORY }}/release.zip
        compression-level: 9
        retention-days: 1

    # Clean up before deployment to free space
    - name: Clean up before deployment
      run: |
        [ -d "${{ env.WORKING_DIRECTORY }}/.venv" ] && rm -rf ${{ env.WORKING_DIRECTORY }}/.venv
        [ -d "${{ env.WORKING_DIRECTORY }}/__pycache__" ] && rm -rf ${{ env.WORKING_DIRECTORY }}/__pycache__
        find ${{ env.WORKING_DIRECTORY }} -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find ${{ env.WORKING_DIRECTORY }} -type f -name "*.pyc" -delete 2>/dev/null || true

    - name: 'Deploy to Azure Web App'
      uses: azure/webapps-deploy@v3
      id: deploy-to-webapp
      with:
        app-name: 'jscbbackend01'
        slot-name: 'production'
        publish-profile: ${{ secrets.AZURE_BACKEND_PUBLISH_PROFILE }}
        package: ${{ env.WORKING_DIRECTORY }}/release.zip
        clean: true

    # Azure CLI Login (if using Azure CLI to set Startup Command)
    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}  # Ensure you have set this secret

    # Set Startup Command via Azure CLI
    - name: Set Startup Command
      run: |
        az webapp config set --resource-group <YourResourceGroup> --name jscbbackend01 --startup-file "./startup.sh"

    # Clean up after deployment
    - name: Clean up after deployment
      if: always()
      run: |
        [ -f "${{ env.WORKING_DIRECTORY }}/release.zip" ] && rm -f ${{ env.WORKING_DIRECTORY }}/release.zip
        [ -d "~/.cache/pip" ] && rm -rf ~/.cache/pip || true