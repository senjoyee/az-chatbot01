name: Deploy to Azure Web Apps

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  WORKING_DIRECTORY: ./backend

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python version
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          ${{ env.WORKING_DIRECTORY }}/requirements.txt

    # Cache the virtual environment
    - name: Cache virtual environment
      uses: actions/cache@v3
      with:
        path: ${{ env.WORKING_DIRECTORY }}/.venv
        key: venv-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          venv-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-

    - name: Create and start virtual environment
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip

    # Cache pip packages
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          pip-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-

    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        source .venv/bin/activate
        pip install -r requirements.txt

    # Add startup script for system dependencies
    - name: Create startup script
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        # Create the main startup script
        echo "#!/bin/bash" > startup.sh
        echo "set -e" >> startup.sh
        echo "" >> startup.sh
        # Update package list and install dependencies
        echo "# Install system dependencies" >> startup.sh
        echo "apt-get update" >> startup.sh
        echo "DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\" >> startup.sh
        echo "  libmagic1 libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 \\" >> startup.sh
        echo "  libxrender1 libgomp1 libglu1-mesa libxi6 libxmu6 \\" >> startup.sh
        echo "  x11-common poppler-utils tesseract-ocr" >> startup.sh
        echo "" >> startup.sh
        # Python environment setup
        echo "# Setup Python environment" >> startup.sh
        echo "export PYTHONPATH=/home/site/wwwroot:/home/site/wwwroot/antenv/lib/python3.11/site-packages:\$PYTHONPATH" >> startup.sh
        echo "export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/lib:/usr/local/lib:\$LD_LIBRARY_PATH" >> startup.sh
        echo "" >> startup.sh
        # OpenCV setup
        echo "# Setup OpenCV dependencies" >> startup.sh
        echo "pip install --upgrade pip" >> startup.sh
        echo "pip install opencv-python-headless==4.5.1.48" >> startup.sh
        echo "" >> startup.sh
        # Start application
        echo "# Start the application" >> startup.sh
        echo "cd /home/site/wwwroot" >> startup.sh
        echo "gunicorn --bind=0.0.0.0:5000 --timeout 600 app:app" >> startup.sh
        
        # Make the script executable
        chmod +x startup.sh
        
        # Create a .deployment file to tell Azure where to find the startup script
        echo "[config]" > .deployment
        echo "STARTUP_FILE=startup.sh" >> .deployment

    - name: List backend directory contents
      run: |
        echo "Backend directory contents:"
        ls -R ${{ env.WORKING_DIRECTORY }}/

    # Cache the zip artifact
    - name: Cache deployment artifact
      uses: actions/cache@v3
      id: artifact-cache
      with:
        path: ${{ env.WORKING_DIRECTORY }}/release.zip
        key: deploy-${{ github.sha }}
        restore-keys: |
          deploy-

    - name: Zip artifact for deployment
      if: steps.artifact-cache.outputs.cache-hit != 'true'
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        # Ensure startup script and .deployment have correct permissions
        chmod +x startup.sh
        
        # Create deployment package
        zip release.zip ./* .deployment -r \
          -x "*.pyc" \
          -x "__pycache__/*" \
          -x "*.git*" \
          -x ".venv/*" \
          -x "tests/*" \
          -x "*.log" \
          -x "*.tmp" \
          -x "*.bak"
        
        # Verify critical files are in the zip
        echo "Verifying deployment package contents:"
        unzip -l release.zip | grep -E "startup.sh|.deployment" || echo "WARNING: Critical files missing from zip"

    - name: Upload artifact for deployment jobs
      uses: actions/upload-artifact@v4
      with:
        name: python-app
        path: ${{ env.WORKING_DIRECTORY }}/release.zip
        compression-level: 9
        retention-days: 1

    # Clean up before deployment to free space
    - name: Clean up before deployment
      run: |
        [ -d "${{ env.WORKING_DIRECTORY }}/.venv" ] && rm -rf ${{ env.WORKING_DIRECTORY }}/.venv
        [ -d "${{ env.WORKING_DIRECTORY }}/__pycache__" ] && rm -rf ${{ env.WORKING_DIRECTORY }}/__pycache__
        find ${{ env.WORKING_DIRECTORY }} -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find ${{ env.WORKING_DIRECTORY }} -type f -name "*.pyc" -delete 2>/dev/null || true

    - name: 'Deploy to Azure Web App'
      uses: azure/webapps-deploy@v3
      id: deploy-to-webapp
      with:
        app-name: 'jscbbackend01'
        slot-name: 'production'
        publish-profile: ${{ secrets.AZURE_BACKEND_PUBLISH_PROFILE }}
        package: ${{ env.WORKING_DIRECTORY }}/release.zip
        clean: true

    # Clean up after deployment
    - name: Clean up after deployment
      if: always()
      run: |
        [ -f "${{ env.WORKING_DIRECTORY }}/release.zip" ] && rm -f ${{ env.WORKING_DIRECTORY }}/release.zip
        [ -d "~/.cache/pip" ] && rm -rf ~/.cache/pip || true